const en = {
  'lang':'en',
  "title":"Go Modules Cheat Sheet",
  "quick_start":"Quick start",
  "dep_management":"# Dependency Management",
  "add_dep":"# add or upgrade dep",
  "specific_version":"# use specific version",
  "specific_branch":"# use specific branch",
  "upgrade_modules":"# upgrade all modules used in subdirs",
  "remove_dep":"# remove dep",
  "useful_commands":"# Useful commands",
  "tidy_mod":"# organize and clean up go.mod and go.sum",
  "download_mod":"# download deps into module cache",
  "init_module":"# initialize new module",
  "why_dep":"# why is the module a dependency?",
  "install_binary":"# build and install a binary",
  "anatomy_mod":"Anatomy of go.mod",
  "mvs":"Minimal Version Selection (MVS)",
  "mvs_p1":"To build a program Go needs to know exactly which dependencies you need, and which version to use.",
  "mvs_p2":"Go uses MVS as a predictable and simple way to decide which version to use.",
  "mvs_p3":"It works like this:",

  "mvs_ol_li1":"The module you’re running from is the “main module”",
  "mvs_ol_li2":"Find all dependencies the main module needs (recursively, using the dependencies’ go.mod files)",
  "mvs_ol_li3_1":"For each dependency, use the greatest version that any ",
  "mvs_ol_li3_2":"go.mod",
  "mvs_ol_li3_3":" explicitly specified",

  "example":"Example",
  "mvs_example_p1":"In this example, the main module depends on &lt;code&gt; A 1.0 &lt;/code&gt; and <code>B 2.1</code>.",
  "mvs_example_p2":"Since <code>B 2.1</code> depends on <code>A 1.1</code>, this is the version of <code>A</code> that will be used.",
   "mvs_example_p3":"Since <code>A 1.1</code> is used, it also pulls in <code>C 1.1</code>.",
   "mvs_example_p4":"The final dependency list is:",
  "mvs_example_p4_ul_li1":"A 1.1",
  "mvs_example_p4_ul_li2":"B 2.1",
  "mvs_example_p4_ul_li3":"C 1.1",
  "contributions":"Contributions welcome at",
  "module_path":"Go import path for where the module is hosted",
  "module_version":"Go version used to develop the module",
  "new_features":"(to use new language features)",
  "v2_later_version":"v2 and later have the major version in the module path",
  "pseudo_version_1":"A “pseudo-version” that refers to",
  "pseudo_version_2":"a commit and not a tagged release",
  "incompatible_package_1":"“incompatible” means the package",
  "incompatible_package_2":"hasn’t been migrated to Go modules yet",
  "replace_module":"Replace this module with this one",
  "specific_version_1":"Prevent a specific",
  "specific_version_2":"module version",
  "specific_version_3":"from being used",
}

export {en};